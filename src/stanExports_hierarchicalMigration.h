// Generated by rstantools.  Do not edit by hand.

/*
    TuktuTools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TuktuTools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TuktuTools.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_hierarchicalMigration_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_hierarchicalMigration");
    reader.add_event(160, 158, "end", "model_hierarchicalMigration");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
squishycut(const T0__& x,
               const T1__& delta,
               const T2__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        local_scalar_t__ x_squashed(DUMMY_VAR__);
        (void) x_squashed;  // dummy to suppress unused var warning
        stan::math::initialize(x_squashed, DUMMY_VAR__);
        stan::math::fill(x_squashed, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::math::assign(x_squashed, ((1 / ((2 * delta) * beta)) * stan::math::log(((1 + stan::math::exp((beta * (x + delta)))) / (1 + stan::math::exp((beta * (x - delta))))))));
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_squashed);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct squishycut_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
               const T1__& delta,
               const T2__& beta, std::ostream* pstream__) const {
        return squishycut(x, delta, beta, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
squishytwostep(const T0__& x,
                   const T1__& y1,
                   const T2__& y2,
                   const T3__& x1,
                   const T4__& x2,
                   const T5__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 18;
        local_scalar_t__ y_stepped(DUMMY_VAR__);
        (void) y_stepped;  // dummy to suppress unused var warning
        stan::math::initialize(y_stepped, DUMMY_VAR__);
        stan::math::fill(y_stepped, DUMMY_VAR__);
        current_statement_begin__ = 19;
        stan::math::assign(y_stepped, (y1 + (((2 * (y2 - y1)) / (x2 - x1)) * ((1 / (1 + stan::math::exp((beta * (x - x2))))) - (1 / (1 + stan::math::exp((beta * (x - x1)))))))));
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y_stepped);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct squishytwostep_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& x,
                   const T1__& y1,
                   const T2__& y2,
                   const T3__& x1,
                   const T4__& x2,
                   const T5__& beta, std::ostream* pstream__) const {
        return squishytwostep(x, y1, y2, x1, x2, beta, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_hierarchicalMigration
  : public stan::model::model_base_crtp<model_hierarchicalMigration> {
private:
        int n;
        int k;
        std::vector<double> y;
        std::vector<double> x;
        std::vector<double> yday;
        std::vector<int> id;
        double squish;
        std::vector<double> deltat;
public:
    model_hierarchicalMigration(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_hierarchicalMigration(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_hierarchicalMigration_namespace::model_hierarchicalMigration";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 27;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n));
            y = std::vector<double>(n, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("x", "n", n);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n));
            x = std::vector<double>(n, double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("yday", "n", n);
            context__.validate_dims("data initialization", "yday", "double", context__.to_vec(n));
            yday = std::vector<double>(n, double(0));
            vals_r__ = context__.vals_r("yday");
            pos__ = 0;
            size_t yday_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < yday_k_0_max__; ++k_0__) {
                yday[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("id", "n", n);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(n));
            id = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            size_t id_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id[i_0__]", id[i_0__], 1);
                check_less_or_equal(function__, "id[i_0__]", id[i_0__], k);
            }
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "squish", "double", context__.to_vec());
            squish = double(0);
            vals_r__ = context__.vals_r("squish");
            pos__ = 0;
            squish = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 35;
            validate_non_negative_index("deltat", "n", n);
            deltat = std::vector<double>(n, double(0));
            stan::math::fill(deltat, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 36;
            stan::model::assign(deltat, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable deltat");
            current_statement_begin__ = 37;
            for (int i = 2; i <= n; ++i) {
                current_statement_begin__ = 38;
                if (as_bool(logical_eq(get_base1(id, i, "id", 1), get_base1(id, (i - 1), "id", 1)))) {
                    current_statement_begin__ = 39;
                    stan::model::assign(deltat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(yday, i, "yday", 1) - get_base1(yday, (i - 1), "yday", 1)), 
                                "assigning variable deltat");
                } else {
                    current_statement_begin__ = 41;
                    stan::model::assign(deltat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable deltat");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 46;
            validate_non_negative_index("mux_mean", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 47;
            validate_non_negative_index("muy_mean", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 48;
            validate_non_negative_index("mux1", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 49;
            validate_non_negative_index("muy1", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 50;
            validate_non_negative_index("mux2", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 51;
            validate_non_negative_index("muy2", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            validate_non_negative_index("t", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            validate_non_negative_index("dt", "k", k);
            num_params_r__ += (1 * k);
            current_statement_begin__ = 63;
            num_params_r__ += 1;
            current_statement_begin__ = 64;
            num_params_r__ += 1;
            current_statement_begin__ = 65;
            num_params_r__ += 1;
            current_statement_begin__ = 67;
            num_params_r__ += 1;
            current_statement_begin__ = 68;
            num_params_r__ += 1;
            current_statement_begin__ = 69;
            num_params_r__ += 1;
            current_statement_begin__ = 71;
            num_params_r__ += 1;
            current_statement_begin__ = 72;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_hierarchicalMigration() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 46;
        if (!(context__.contains_r("mux_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mux_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mux_mean");
        pos__ = 0U;
        validate_non_negative_index("mux_mean", "2", 2);
        context__.validate_dims("parameter initialization", "mux_mean", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mux_mean(2);
        size_t mux_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mux_mean_j_1_max__; ++j_1__) {
            mux_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(min(x), max(x), mux_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mux_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("muy_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muy_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muy_mean");
        pos__ = 0U;
        validate_non_negative_index("muy_mean", "2", 2);
        context__.validate_dims("parameter initialization", "muy_mean", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> muy_mean(2);
        size_t muy_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muy_mean_j_1_max__; ++j_1__) {
            muy_mean(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(min(y), max(y), muy_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muy_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("mux1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mux1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mux1");
        pos__ = 0U;
        validate_non_negative_index("mux1", "k", k);
        context__.validate_dims("parameter initialization", "mux1", "double", context__.to_vec(k));
        std::vector<double> mux1(k, double(0));
        size_t mux1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux1_k_0_max__; ++k_0__) {
            mux1[k_0__] = vals_r__[pos__++];
        }
        size_t mux1_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < mux1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(min(x), max(x), mux1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mux1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("muy1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muy1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muy1");
        pos__ = 0U;
        validate_non_negative_index("muy1", "k", k);
        context__.validate_dims("parameter initialization", "muy1", "double", context__.to_vec(k));
        std::vector<double> muy1(k, double(0));
        size_t muy1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy1_k_0_max__; ++k_0__) {
            muy1[k_0__] = vals_r__[pos__++];
        }
        size_t muy1_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < muy1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(min(y), max(y), muy1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muy1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("mux2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mux2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mux2");
        pos__ = 0U;
        validate_non_negative_index("mux2", "k", k);
        context__.validate_dims("parameter initialization", "mux2", "double", context__.to_vec(k));
        std::vector<double> mux2(k, double(0));
        size_t mux2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux2_k_0_max__; ++k_0__) {
            mux2[k_0__] = vals_r__[pos__++];
        }
        size_t mux2_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < mux2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(min(x), max(x), mux2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mux2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("muy2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muy2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muy2");
        pos__ = 0U;
        validate_non_negative_index("muy2", "k", k);
        context__.validate_dims("parameter initialization", "muy2", "double", context__.to_vec(k));
        std::vector<double> muy2(k, double(0));
        size_t muy2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy2_k_0_max__; ++k_0__) {
            muy2[k_0__] = vals_r__[pos__++];
        }
        size_t muy2_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < muy2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(min(y), max(y), muy2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muy2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("t_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "t_mean", "double", context__.to_vec());
        double t_mean(0);
        t_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(min(yday), max(yday), t_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("t_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "t_sd", "double", context__.to_vec());
        double t_sd(0);
        t_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, t_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("t")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable t missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("t");
        pos__ = 0U;
        validate_non_negative_index("t", "k", k);
        context__.validate_dims("parameter initialization", "t", "double", context__.to_vec(k));
        std::vector<double> t(k, double(0));
        size_t t_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
            t[k_0__] = vals_r__[pos__++];
        }
        size_t t_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < t_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(min(yday), max(yday), t[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable t: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("dt_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dt_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dt_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "dt_mean", "double", context__.to_vec());
        double dt_mean(0);
        dt_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 100, dt_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dt_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("dt_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dt_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dt_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "dt_sd", "double", context__.to_vec());
        double dt_sd(0);
        dt_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, dt_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dt_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("dt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dt");
        pos__ = 0U;
        validate_non_negative_index("dt", "k", k);
        context__.validate_dims("parameter initialization", "dt", "double", context__.to_vec(k));
        std::vector<double> dt(k, double(0));
        size_t dt_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            dt[k_0__] = vals_r__[pos__++];
        }
        size_t dt_i_0_max__ = k;
        for (size_t i_0__ = 0; i_0__ < dt_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 100, dt[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dt: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("mux1_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mux1_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mux1_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mux1_sigma", "double", context__.to_vec());
        double mux1_sigma(0);
        mux1_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mux1_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mux1_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("muy1_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muy1_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muy1_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "muy1_sigma", "double", context__.to_vec());
        double muy1_sigma(0);
        muy1_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, muy1_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muy1_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("rho1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho1", "double", context__.to_vec());
        double rho1(0);
        rho1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("mux2_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mux2_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mux2_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mux2_sigma", "double", context__.to_vec());
        double mux2_sigma(0);
        mux2_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mux2_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mux2_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("muy2_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muy2_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muy2_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "muy2_sigma", "double", context__.to_vec());
        double muy2_sigma(0);
        muy2_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, muy2_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muy2_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("rho2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho2", "double", context__.to_vec());
        double rho2(0);
        rho2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("sigma_ranging")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_ranging missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_ranging");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_ranging", "double", context__.to_vec());
        double sigma_ranging(0);
        sigma_ranging = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_ranging);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_ranging: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("sigma_migration")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_migration missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_migration");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_migration", "double", context__.to_vec());
        double sigma_migration(0);
        sigma_migration = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_migration);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_migration: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 46;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mux_mean;
            (void) mux_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                mux_mean = in__.vector_lub_constrain(min(x), max(x), 2, lp__);
            else
                mux_mean = in__.vector_lub_constrain(min(x), max(x), 2);
            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> muy_mean;
            (void) muy_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                muy_mean = in__.vector_lub_constrain(min(y), max(y), 2, lp__);
            else
                muy_mean = in__.vector_lub_constrain(min(y), max(y), 2);
            current_statement_begin__ = 48;
            std::vector<local_scalar_t__> mux1;
            size_t mux1_d_0_max__ = k;
            mux1.reserve(mux1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mux1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mux1.push_back(in__.scalar_lub_constrain(min(x), max(x), lp__));
                else
                    mux1.push_back(in__.scalar_lub_constrain(min(x), max(x)));
            }
            current_statement_begin__ = 49;
            std::vector<local_scalar_t__> muy1;
            size_t muy1_d_0_max__ = k;
            muy1.reserve(muy1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < muy1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    muy1.push_back(in__.scalar_lub_constrain(min(y), max(y), lp__));
                else
                    muy1.push_back(in__.scalar_lub_constrain(min(y), max(y)));
            }
            current_statement_begin__ = 50;
            std::vector<local_scalar_t__> mux2;
            size_t mux2_d_0_max__ = k;
            mux2.reserve(mux2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mux2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mux2.push_back(in__.scalar_lub_constrain(min(x), max(x), lp__));
                else
                    mux2.push_back(in__.scalar_lub_constrain(min(x), max(x)));
            }
            current_statement_begin__ = 51;
            std::vector<local_scalar_t__> muy2;
            size_t muy2_d_0_max__ = k;
            muy2.reserve(muy2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < muy2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    muy2.push_back(in__.scalar_lub_constrain(min(y), max(y), lp__));
                else
                    muy2.push_back(in__.scalar_lub_constrain(min(y), max(y)));
            }
            current_statement_begin__ = 54;
            local_scalar_t__ t_mean;
            (void) t_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                t_mean = in__.scalar_lub_constrain(min(yday), max(yday), lp__);
            else
                t_mean = in__.scalar_lub_constrain(min(yday), max(yday));
            current_statement_begin__ = 55;
            local_scalar_t__ t_sd;
            (void) t_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                t_sd = in__.scalar_lb_constrain(0, lp__);
            else
                t_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 56;
            std::vector<local_scalar_t__> t;
            size_t t_d_0_max__ = k;
            t.reserve(t_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < t_d_0_max__; ++d_0__) {
                if (jacobian__)
                    t.push_back(in__.scalar_lub_constrain(min(yday), max(yday), lp__));
                else
                    t.push_back(in__.scalar_lub_constrain(min(yday), max(yday)));
            }
            current_statement_begin__ = 58;
            local_scalar_t__ dt_mean;
            (void) dt_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                dt_mean = in__.scalar_lub_constrain(0, 100, lp__);
            else
                dt_mean = in__.scalar_lub_constrain(0, 100);
            current_statement_begin__ = 59;
            local_scalar_t__ dt_sd;
            (void) dt_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                dt_sd = in__.scalar_lb_constrain(0, lp__);
            else
                dt_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 60;
            std::vector<local_scalar_t__> dt;
            size_t dt_d_0_max__ = k;
            dt.reserve(dt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < dt_d_0_max__; ++d_0__) {
                if (jacobian__)
                    dt.push_back(in__.scalar_lub_constrain(0, 100, lp__));
                else
                    dt.push_back(in__.scalar_lub_constrain(0, 100));
            }
            current_statement_begin__ = 63;
            local_scalar_t__ mux1_sigma;
            (void) mux1_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                mux1_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                mux1_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 64;
            local_scalar_t__ muy1_sigma;
            (void) muy1_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                muy1_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                muy1_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 65;
            local_scalar_t__ rho1;
            (void) rho1;  // dummy to suppress unused var warning
            if (jacobian__)
                rho1 = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho1 = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 67;
            local_scalar_t__ mux2_sigma;
            (void) mux2_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                mux2_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                mux2_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 68;
            local_scalar_t__ muy2_sigma;
            (void) muy2_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                muy2_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                muy2_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 69;
            local_scalar_t__ rho2;
            (void) rho2;  // dummy to suppress unused var warning
            if (jacobian__)
                rho2 = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho2 = in__.scalar_lub_constrain(-(1), 1);
            current_statement_begin__ = 71;
            local_scalar_t__ sigma_ranging;
            (void) sigma_ranging;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_ranging = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_ranging = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 72;
            local_scalar_t__ sigma_migration;
            (void) sigma_migration;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_migration = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_migration = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 77;
            validate_non_negative_index("mu1_Sigma_chol", "2", 2);
            validate_non_negative_index("mu1_Sigma_chol", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu1_Sigma_chol(2, 2);
            stan::math::initialize(mu1_Sigma_chol, DUMMY_VAR__);
            stan::math::fill(mu1_Sigma_chol, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("mu2_Sigma_chol", "2", 2);
            validate_non_negative_index("mu2_Sigma_chol", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu2_Sigma_chol(2, 2);
            stan::math::initialize(mu2_Sigma_chol, DUMMY_VAR__);
            stan::math::fill(mu2_Sigma_chol, DUMMY_VAR__);
            current_statement_begin__ = 80;
            local_scalar_t__ A;
            (void) A;  // dummy to suppress unused var warning
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 84;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mux1_sigma, 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 85;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 86;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (muy1_sigma * rho1), 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 87;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (muy1_sigma * stan::math::sqrt((1 - square(rho1)))), 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 89;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mux2_sigma, 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 90;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 91;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (muy2_sigma * rho2), 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 92;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (muy2_sigma * stan::math::sqrt((1 - square(rho2)))), 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 94;
            stan::math::assign(A, (((-(2) * pow(sigma_ranging, 2)) * stan::math::log(0.05)) * stan::math::pi()));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 77;
            size_t mu1_Sigma_chol_j_1_max__ = 2;
            size_t mu1_Sigma_chol_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < mu1_Sigma_chol_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu1_Sigma_chol_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu1_Sigma_chol(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu1_Sigma_chol" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu1_Sigma_chol: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cholesky_factor(function__, "mu1_Sigma_chol", mu1_Sigma_chol);
            current_statement_begin__ = 78;
            size_t mu2_Sigma_chol_j_1_max__ = 2;
            size_t mu2_Sigma_chol_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < mu2_Sigma_chol_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu2_Sigma_chol_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu2_Sigma_chol(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu2_Sigma_chol" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu2_Sigma_chol: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cholesky_factor(function__, "mu2_Sigma_chol", mu2_Sigma_chol);
            current_statement_begin__ = 80;
            if (stan::math::is_uninitialized(A)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: A";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable A: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 99;
            validate_non_negative_index("x_hat", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_hat(n);
            stan::math::initialize(x_hat, DUMMY_VAR__);
            stan::math::fill(x_hat, DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("y_hat", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y_hat(n);
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 101;
            validate_non_negative_index("x_res", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x_res(n);
            stan::math::initialize(x_res, DUMMY_VAR__);
            stan::math::fill(x_res, DUMMY_VAR__);
            current_statement_begin__ = 102;
            validate_non_negative_index("y_res", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y_res(n);
            stan::math::initialize(y_res, DUMMY_VAR__);
            stan::math::fill(y_res, DUMMY_VAR__);
            current_statement_begin__ = 103;
            validate_non_negative_index("mu1_mean", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu1_mean(2);
            stan::math::initialize(mu1_mean, DUMMY_VAR__);
            stan::math::fill(mu1_mean, DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("mu2_mean", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu2_mean(2);
            stan::math::initialize(mu2_mean, DUMMY_VAR__);
            stan::math::fill(mu2_mean, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("mu1", "2", 2);
            validate_non_negative_index("mu1", "k", k);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > mu1(k, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(2));
            stan::math::initialize(mu1, DUMMY_VAR__);
            stan::math::fill(mu1, DUMMY_VAR__);
            current_statement_begin__ = 107;
            validate_non_negative_index("mu2", "2", 2);
            validate_non_negative_index("mu2", "k", k);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > mu2(k, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(2));
            stan::math::initialize(mu2, DUMMY_VAR__);
            stan::math::fill(mu2, DUMMY_VAR__);
            current_statement_begin__ = 108;
            local_scalar_t__ sigma_res(DUMMY_VAR__);
            (void) sigma_res;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_res, DUMMY_VAR__);
            stan::math::fill(sigma_res, DUMMY_VAR__);
            current_statement_begin__ = 110;
            lp_accum__.add(normal_log<propto__>(t_mean, mean(yday), 20.0));
            if (t_mean < min(yday)) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else if (t_mean > max(yday)) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-log_diff_exp(normal_cdf_log(max(yday), mean(yday), 20.0), normal_cdf_log(min(yday), mean(yday), 20.0)));
            current_statement_begin__ = 111;
            lp_accum__.add(exponential_log<propto__>(t_sd, (1 / 50.0)));
            current_statement_begin__ = 112;
            lp_accum__.add(normal_log<propto__>(dt_mean, 20.0, 20.0));
            if (dt_mean < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else if (dt_mean > max(yday)) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-log_diff_exp(normal_cdf_log(max(yday), 20.0, 20.0), normal_cdf_log(0, 20.0, 20.0)));
            current_statement_begin__ = 113;
            lp_accum__.add(exponential_log<propto__>(dt_sd, (1 / 50.0)));
            current_statement_begin__ = 115;
            stan::model::assign(mu1_mean, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(mux_mean, 1, "mux_mean", 1), 
                        "assigning variable mu1_mean");
            current_statement_begin__ = 116;
            stan::model::assign(mu1_mean, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        get_base1(muy_mean, 1, "muy_mean", 1), 
                        "assigning variable mu1_mean");
            current_statement_begin__ = 117;
            stan::model::assign(mu2_mean, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        get_base1(mux_mean, 2, "mux_mean", 1), 
                        "assigning variable mu2_mean");
            current_statement_begin__ = 118;
            stan::model::assign(mu2_mean, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        get_base1(muy_mean, 2, "muy_mean", 1), 
                        "assigning variable mu2_mean");
            current_statement_begin__ = 120;
            lp_accum__.add(normal_log<propto__>(t, t_mean, t_sd));
            current_statement_begin__ = 121;
            lp_accum__.add(normal_log<propto__>(dt, dt_mean, dt_sd));
            current_statement_begin__ = 123;
            for (int i = 1; i <= k; ++i) {
                current_statement_begin__ = 124;
                stan::model::assign(mu1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(mux1, i, "mux1", 1), 
                            "assigning variable mu1");
                current_statement_begin__ = 125;
                stan::model::assign(mu1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            get_base1(muy1, i, "muy1", 1), 
                            "assigning variable mu1");
                current_statement_begin__ = 126;
                stan::model::assign(mu2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(mux2, i, "mux2", 1), 
                            "assigning variable mu2");
                current_statement_begin__ = 127;
                stan::model::assign(mu2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            get_base1(muy2, i, "muy2", 1), 
                            "assigning variable mu2");
                current_statement_begin__ = 128;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(mu1, i, "mu1", 1), mu1_mean, mu1_Sigma_chol));
                current_statement_begin__ = 129;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(get_base1(mu2, i, "mu2", 1), mu2_mean, mu2_Sigma_chol));
            }
            current_statement_begin__ = 132;
            stan::model::assign(x_res, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable x_res");
            current_statement_begin__ = 133;
            stan::model::assign(y_res, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable y_res");
            current_statement_begin__ = 135;
            for (int i = 2; i <= n; ++i) {
                current_statement_begin__ = 136;
                stan::model::assign(x_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(get_base1(mu1, get_base1(id, i, "id", 1), "mu1", 1), 1, "mu1", 2) + ((get_base1(get_base1(mu2, get_base1(id, i, "id", 1), "mu2", 1), 1, "mu2", 2) - get_base1(get_base1(mu1, get_base1(id, i, "id", 1), "mu1", 1), 1, "mu1", 2)) * squishycut(((get_base1(yday, i, "yday", 1) - get_base1(t, get_base1(id, i, "id", 1), "t", 1)) - (get_base1(dt, get_base1(id, i, "id", 1), "dt", 1) / 2)), (get_base1(dt, get_base1(id, i, "id", 1), "dt", 1) / 2), squish, pstream__))), 
                            "assigning variable x_hat");
                current_statement_begin__ = 141;
                stan::model::assign(y_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(get_base1(mu1, get_base1(id, i, "id", 1), "mu1", 1), 2, "mu1", 2) + ((get_base1(get_base1(mu2, get_base1(id, i, "id", 1), "mu2", 1), 2, "mu2", 2) - get_base1(get_base1(mu1, get_base1(id, i, "id", 1), "mu1", 1), 2, "mu1", 2)) * squishycut(((get_base1(yday, i, "yday", 1) - get_base1(t, get_base1(id, i, "id", 1), "t", 1)) - (get_base1(dt, get_base1(id, i, "id", 1), "dt", 1) / 2)), (get_base1(dt, get_base1(id, i, "id", 1), "dt", 1) / 2), squish, pstream__))), 
                            "assigning variable y_hat");
                current_statement_begin__ = 146;
                if (as_bool(logical_eq(get_base1(id, i, "id", 1), get_base1(id, (i - 1), "id", 1)))) {
                    current_statement_begin__ = 147;
                    stan::model::assign(x_res, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(x, i, "x", 1) - get_base1(x_hat, i, "x_hat", 1)), 
                                "assigning variable x_res");
                    current_statement_begin__ = 148;
                    stan::model::assign(y_res, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(y, i, "y", 1) - get_base1(y_hat, i, "y_hat", 1)), 
                                "assigning variable y_res");
                    current_statement_begin__ = 149;
                    stan::math::assign(sigma_res, squishytwostep(get_base1(yday, i, "yday", 1), sigma_ranging, sigma_migration, get_base1(t, get_base1(id, i, "id", 1), "t", 1), (get_base1(t, get_base1(id, i, "id", 1), "t", 1) + get_base1(dt, get_base1(id, i, "id", 1), "dt", 1)), squish, pstream__));
                    current_statement_begin__ = 150;
                    lp_accum__.add(normal_log<propto__>(get_base1(x_res, i, "x_res", 1), 0, sigma_res));
                    current_statement_begin__ = 151;
                    lp_accum__.add(normal_log<propto__>(get_base1(y_res, i, "y_res", 1), 0, sigma_res));
                } else {
                    current_statement_begin__ = 154;
                    stan::model::assign(x_res, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable x_res");
                    current_statement_begin__ = 155;
                    stan::model::assign(y_res, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable y_res");
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mux_mean");
        names__.push_back("muy_mean");
        names__.push_back("mux1");
        names__.push_back("muy1");
        names__.push_back("mux2");
        names__.push_back("muy2");
        names__.push_back("t_mean");
        names__.push_back("t_sd");
        names__.push_back("t");
        names__.push_back("dt_mean");
        names__.push_back("dt_sd");
        names__.push_back("dt");
        names__.push_back("mux1_sigma");
        names__.push_back("muy1_sigma");
        names__.push_back("rho1");
        names__.push_back("mux2_sigma");
        names__.push_back("muy2_sigma");
        names__.push_back("rho2");
        names__.push_back("sigma_ranging");
        names__.push_back("sigma_migration");
        names__.push_back("mu1_Sigma_chol");
        names__.push_back("mu2_Sigma_chol");
        names__.push_back("A");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_hierarchicalMigration_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> mux_mean = in__.vector_lub_constrain(min(x), max(x), 2);
        size_t mux_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mux_mean_j_1_max__; ++j_1__) {
            vars__.push_back(mux_mean(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> muy_mean = in__.vector_lub_constrain(min(y), max(y), 2);
        size_t muy_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muy_mean_j_1_max__; ++j_1__) {
            vars__.push_back(muy_mean(j_1__));
        }
        std::vector<double> mux1;
        size_t mux1_d_0_max__ = k;
        mux1.reserve(mux1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mux1_d_0_max__; ++d_0__) {
            mux1.push_back(in__.scalar_lub_constrain(min(x), max(x)));
        }
        size_t mux1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux1_k_0_max__; ++k_0__) {
            vars__.push_back(mux1[k_0__]);
        }
        std::vector<double> muy1;
        size_t muy1_d_0_max__ = k;
        muy1.reserve(muy1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < muy1_d_0_max__; ++d_0__) {
            muy1.push_back(in__.scalar_lub_constrain(min(y), max(y)));
        }
        size_t muy1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy1_k_0_max__; ++k_0__) {
            vars__.push_back(muy1[k_0__]);
        }
        std::vector<double> mux2;
        size_t mux2_d_0_max__ = k;
        mux2.reserve(mux2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mux2_d_0_max__; ++d_0__) {
            mux2.push_back(in__.scalar_lub_constrain(min(x), max(x)));
        }
        size_t mux2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux2_k_0_max__; ++k_0__) {
            vars__.push_back(mux2[k_0__]);
        }
        std::vector<double> muy2;
        size_t muy2_d_0_max__ = k;
        muy2.reserve(muy2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < muy2_d_0_max__; ++d_0__) {
            muy2.push_back(in__.scalar_lub_constrain(min(y), max(y)));
        }
        size_t muy2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy2_k_0_max__; ++k_0__) {
            vars__.push_back(muy2[k_0__]);
        }
        double t_mean = in__.scalar_lub_constrain(min(yday), max(yday));
        vars__.push_back(t_mean);
        double t_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(t_sd);
        std::vector<double> t;
        size_t t_d_0_max__ = k;
        t.reserve(t_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < t_d_0_max__; ++d_0__) {
            t.push_back(in__.scalar_lub_constrain(min(yday), max(yday)));
        }
        size_t t_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
            vars__.push_back(t[k_0__]);
        }
        double dt_mean = in__.scalar_lub_constrain(0, 100);
        vars__.push_back(dt_mean);
        double dt_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(dt_sd);
        std::vector<double> dt;
        size_t dt_d_0_max__ = k;
        dt.reserve(dt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < dt_d_0_max__; ++d_0__) {
            dt.push_back(in__.scalar_lub_constrain(0, 100));
        }
        size_t dt_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            vars__.push_back(dt[k_0__]);
        }
        double mux1_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(mux1_sigma);
        double muy1_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(muy1_sigma);
        double rho1 = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho1);
        double mux2_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(mux2_sigma);
        double muy2_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(muy2_sigma);
        double rho2 = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho2);
        double sigma_ranging = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_ranging);
        double sigma_migration = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_migration);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 77;
            validate_non_negative_index("mu1_Sigma_chol", "2", 2);
            validate_non_negative_index("mu1_Sigma_chol", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu1_Sigma_chol(2, 2);
            stan::math::initialize(mu1_Sigma_chol, DUMMY_VAR__);
            stan::math::fill(mu1_Sigma_chol, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("mu2_Sigma_chol", "2", 2);
            validate_non_negative_index("mu2_Sigma_chol", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu2_Sigma_chol(2, 2);
            stan::math::initialize(mu2_Sigma_chol, DUMMY_VAR__);
            stan::math::fill(mu2_Sigma_chol, DUMMY_VAR__);
            current_statement_begin__ = 80;
            double A;
            (void) A;  // dummy to suppress unused var warning
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 84;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mux1_sigma, 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 85;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 86;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (muy1_sigma * rho1), 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 87;
            stan::model::assign(mu1_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (muy1_sigma * stan::math::sqrt((1 - square(rho1)))), 
                        "assigning variable mu1_Sigma_chol");
            current_statement_begin__ = 89;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        mux2_sigma, 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 90;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 91;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (muy2_sigma * rho2), 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 92;
            stan::model::assign(mu2_Sigma_chol, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (muy2_sigma * stan::math::sqrt((1 - square(rho2)))), 
                        "assigning variable mu2_Sigma_chol");
            current_statement_begin__ = 94;
            stan::math::assign(A, (((-(2) * pow(sigma_ranging, 2)) * stan::math::log(0.05)) * stan::math::pi()));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 77;
            stan::math::check_cholesky_factor(function__, "mu1_Sigma_chol", mu1_Sigma_chol);
            current_statement_begin__ = 78;
            stan::math::check_cholesky_factor(function__, "mu2_Sigma_chol", mu2_Sigma_chol);
            // write transformed parameters
            if (include_tparams__) {
                size_t mu1_Sigma_chol_j_2_max__ = 2;
                size_t mu1_Sigma_chol_j_1_max__ = 2;
                for (size_t j_2__ = 0; j_2__ < mu1_Sigma_chol_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu1_Sigma_chol_j_1_max__; ++j_1__) {
                        vars__.push_back(mu1_Sigma_chol(j_1__, j_2__));
                    }
                }
                size_t mu2_Sigma_chol_j_2_max__ = 2;
                size_t mu2_Sigma_chol_j_1_max__ = 2;
                for (size_t j_2__ = 0; j_2__ < mu2_Sigma_chol_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu2_Sigma_chol_j_1_max__; ++j_1__) {
                        vars__.push_back(mu2_Sigma_chol(j_1__, j_2__));
                    }
                }
                vars__.push_back(A);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_hierarchicalMigration";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mux_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mux_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muy_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mux1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mux2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t t_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dt_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dt_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t dt_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mux1_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muy1_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mux2_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muy2_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ranging";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_migration";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu1_Sigma_chol_j_2_max__ = 2;
            size_t mu1_Sigma_chol_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < mu1_Sigma_chol_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu1_Sigma_chol_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu1_Sigma_chol" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu2_Sigma_chol_j_2_max__ = 2;
            size_t mu2_Sigma_chol_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < mu2_Sigma_chol_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu2_Sigma_chol_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu2_Sigma_chol" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "A";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mux_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < mux_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy_mean_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muy_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mux1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy1_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mux2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < mux2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mux2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muy2_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < muy2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muy2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "t_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t t_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dt_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dt_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t dt_k_0_max__ = k;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mux1_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muy1_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mux2_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "muy2_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_ranging";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_migration";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu1_Sigma_chol_j_1_max__ = (((2 * (2 + 1)) / 2) + ((2 - 2) * 2));
            for (size_t j_1__ = 0; j_1__ < mu1_Sigma_chol_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu1_Sigma_chol" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu2_Sigma_chol_j_1_max__ = (((2 * (2 + 1)) / 2) + ((2 - 2) * 2));
            for (size_t j_1__ = 0; j_1__ < mu2_Sigma_chol_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu2_Sigma_chol" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "A";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_hierarchicalMigration_namespace::model_hierarchicalMigration stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
